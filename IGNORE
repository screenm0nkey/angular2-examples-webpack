DOM
what is event bubbling preventDefault
differnce between DOM and BOM
explain the execution context in JS -
attribute vs property. what the difference
The BOM consists of the objects navigator , history , screen , location and document which are children of window . In the document node is the DOM, the document object model, which represents the contents of the page. You can manipulate it using javascript.



JS
***
what is hoisting;
what is a closure? why would you use one?
difference between setTimeout and setInterval
differnt ways to invoke a function - call and apply
why would you use call or apply to invoke a function
how can i invoke a function with a differnt context (bind)
Difference between == and ===
Tell me how to convert a JS object to json object JSON.stringify()
Can you tell me what JSONP is and why we use it = JSONP is a method commonly used to bypass the cross-domain policies in web
Difference betwween making a request for JSON and a JSONP request


Types of prototypal inheritance
********************************
In prototypal languages you only have objects. No classes. Use  Object.create and Object.assign
1) Prototype delegation (i.e., the prototype chain).
2) Concatenative inheritance (i.e. mixins, `Object.assign()`).
3) Functional inheritance (Not to be confused with functional programming. A function used to create a closure for private state/encapsulation).



CSS
****
box model
what is specificity
what does !important
absolute vs relative
media queries
tellme what flexbox is.
inlne-block vs block
Does margin-top or margin-bottom has effect on inline element?



ANGULAR
*******

#does angular support valid namespacing?
No. there is one injector per app and services with the same name override each other

#types of services
constant
value
service
factory
provider (provider can be configured in app.config)


#explain what scope and rootscope are
$rootScope is the parent object of all $scope Angular objects created in a web page.


#What are the ways to communicate between modules of your application using core AngularJS functionality? Name three ways.
Using services
Using events
Using $scope.apply() to call methods on scopes further up the chain (bad)
By assigning models on $rootScope (bad);
Directly between controllers, using $parent, nextSibling, (bad)
Directly between controllers, using ControllerAs, "require"


#Tell me whats new in Angular 1.5
Lifestyle hooks (http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html)
Component definition
Multiple slot transclusion
ng-animate-swap (rotating banner)
Lazy transclusion (performance boost)



#When a scope is terminated,two events are emitted. name them.
scope.$on(‘$destroy’);
element.on(‘$destroy’);


#how to remove a watch
var deregisterWatchFn = $rootScope.$watch()
deregisterWatchFn()


#What are the phases of a directive
First, the “$compile()” function is executed which returns two link functions, preLink and postLink.
That function is executed for every directive, starting from parent, then child, then grandchild.
You almost never need to use the prelink.
Secondly, two functions are executed for every directive: the controller and the prelink function. The order of execution again
starts with the parent element, then child, then grandchild, etc.
The last function postLink (or link)is executed in the inverse order. That is, it is first executed for grandchild, then child, then parent.


#Explain the differences
The compile function allows the directive to manipulate the DOM before it is compiled and linked thereby allowing it to add/remove/change directives, as well as, add/remove/change other DOM elements.
The controller function facilitates directive communication. Sibling and child directives can request the controller of their siblings and parents to communicate information.
The pre-link function allows for private $scope manipulation before the post-link process begins.
The post-link (or just link) method is the primary workhorse method of the directive.



#what's is the digest loop. how does it work?
In a nutshell, on every dom event the digest cycle all scope models are compared against their previous values.
That is dirty checking. If change is detected, the watches set on that model are fired.
Then another digest cycle executes, and so on until all models are stable.


#whats the difference betwween $digest and $apply.
When $scope.$apply() is called, it kicks the entire application into the $digest loop and in turn runs $rootScope.$digest();
$scope.$digest, which runs the exact same $digest loop, but is executed from the current $scope downwards through its children, a much less costly venture.



#how to speed up angular app
$compileProvider.debugInfoEnabled(false);
$httpProvider.useApplyAsync(true);
Reduced watchers
One-time binding syntax {{ ::value }}
$scope.$apply() versus $scope.$digest()
Avoid ng-repeat where possible;
Limit DOM filters or use stateless filters
Reduce data with limitTo (pagination)


#watch vs $observe
Use $observe when you need to watch a DOM attribute that contains interpolation (i.e., {{}}'s).
Use $watch for everything else.