/*@MODULE*/
class TabContainerController implements angular.IComponentController {
	static $inject = ['$element'];

	/*BINDINGS*/
	onSelect: (params: { tabId: string }) => void;
	onOrderChange: (params: { containerId: string, tabIds: string[] }) => void;
	selectedTabId: string;
	tabOrderId: string;

	private tabs: TabController[];
	private $content: JQuery;

	constructor(private $element: angular.IRootElementService) { }

	$onInit() {
		this.tabs = [];
		this.onSelect = this.onSelect || _.noop;
		this.onOrderChange = this.onOrderChange || _.noop;
	}

	$onChanges({ selectedTabId }: Tab.OnChangesObject) {
		if (selectedTabId.currentValue && selectedTabId.currentValue !== selectedTabId.previousValue) {
			let tab = this.tabs.find(eTab => eTab.identifier === this.selectedTabId);
			tab && this.selectTab(tab);
		}
	}

	$postLink() {
		this.$content = this.$element.find('.tab-content-slot');
	}

	getTabs(): TabController[] {
		return [...this.tabs];
	}

	addTab(tab: TabController) {
		if (!this.tabs.length) {
			tab.active = true;
		}

		this.tabs.push(tab);
	}

	insertTab(tab: TabController, index: number = this.tabs.length, leaveInactive?: boolean) {
		this.tabs.splice(index, 0, tab);
		this.$content.append(tab.$element);
		tab.containerCtrl = this;
		if (!leaveInactive) {
			tab.active = false;
			this.selectTab(tab);
		}
	}

	removeTab(tab: TabController) {
		this.tabs = this.tabs.filter(eTab => eTab !== tab);
		if (tab.active && this.tabs.length) this.selectTab(this.tabs[0]);
	}

	selectTab(tab: TabController) {
		if (tab.active || !this.tabs.find(eTab => eTab === tab)) return;

		this.tabs.forEach(eTab => eTab.active = false);
		tab.active = true;
		this.onSelect({ tabId: tab.identifier });
	}
}

const TabContainerComponent: angular.IComponentOptions = {
	controller: TabContainerController,
	bindings: {
		onSelect: '&',
		onOrderChange: '&',
		selectedTabId: '<selectedTab',
		tabOrderId: '@?tabOrder'
	},
	transclude: true,
	template: ['$attrs', ($attrs: Tab.ContainerAttrs) => {
		const regularTabTmpl =
			`<div class="tab-container-component">
			<!-- TABS -->
			<ul class="tab-headers-slot nav nav-tabs">
				<li ng-repeat="tab in $ctrl.tabs" ng-class="{ 'active' : tab.active }">
					<a ng-click="$ctrl.selectTab(tab)">{{tab.heading}}</a>
				</li>
			</ul>
			<!-- CONTENT -->
			<div class="tab-content-slot" ng-transclude></div>
		</div>`

		const draggableTabTmpl =
			`<div class="tab-container-component">
			<!-- TABS -->
			<ul class="tab-headers-slot nav nav-tabs" spg-draggable-drop-zone="{{$ctrl.tabOrderId}}">
				<li ng-repeat="tab in $ctrl.tabs" ng-class="{ 'active' : tab.active }" spg-draggable="{{tab.identifier}}" draggable-payload="tab">
					<a ng-click="$ctrl.selectTab(tab)">{{tab.heading}}</a>
				</li>
			</ul>
			<!-- CONTENT -->
			<div class="tab-content-slot" ng-transclude></div>
		</div>`;

		return $attrs.tabOrder ? draggableTabTmpl : regularTabTmpl;
	}]
};

angular.module('munisSalesLink').component('tabContainerComponent', TabContainerComponent);







/*@MODULE*/
class TabOrderInitController implements angular.IController {
	static $inject = ['$scope', '$attrs', 'spgRx'];

	private notifier: SpgRx.ISubject<Draggable.DragNotification<TabController>>;
	private tabRegistry: Dictionary<TabController>;

	constructor(private $scope: angular.IScope, private $attrs: Tab.OrderInitAttrs, private rx: SpgRxService) { }

	$onInit() {
		this.notifier = new this.rx.ReplaySubject<Draggable.DragNotification<TabController>>(20, 5000);
		this.tabRegistry = Object.create(null);
	}

	$postLink() {
		this.rx.$watch<Tab.PlacementPositions>(this.$scope, this.$attrs.tabOrderInit)
			.filter(val => _.isObject(val))
			.concatMap(val => this.onTabOrderChange(val))
			.subscribe(this.notifier);
	}

	$onDestroy() {
		this.notifier.dispose();
	}

	registerTabs(tabs: TabController[]) {
		console.log('%cTabs Registered', logColors['orange'], tabs);
		tabs.forEach(tab => this.tabRegistry[tab.identifier] = tab);
	}

	observe(): SpgRx.IObservable<Draggable.DragNotification<TabController>> {
		return this.notifier.asObservable();
	}

	private onTabOrderChange(tabPositions: Tab.PlacementPositions): SpgRx.IObservable<Draggable.DragNotification<TabController>> {
		console.log('%cTabs Order', logColors['orange'], tabPositions);
		return this.rx.from(Object.entries(tabPositions).reduce((results, [containerId, tabIds]) => {
			return [...results, ...tabIds.filter(tabId => this.tabRegistry[tabId]).map((tabId, idx) => ({
				draggableId: tabId,
				destination: containerId,
				index: idx,
				payload: this.tabRegistry[tabId],
				origin: this.tabRegistry[tabId].containerTabOrderId
			}))];
		}, []));
	}
}

const TabOrderInitDirective: angular.IDirectiveFactory = () => ({
	restrict: 'A',
	require: 'spgDraggableContainer',
	controller: TabOrderInitController
});

angular.module('munisSalesLink').directive('tabOrderInit', TabOrderInitDirective);




/*@MODULE*/
const TabOrderDirective: angular.IDirectiveFactory = (rx: SpgRxService) => ({
	restrict: 'A',
	require: ['tabContainerComponent', '?^^spgDraggableContainer', '?^^tabOrderInit'],
	link(
		scope: angular.IScope,
		element: angular.IRootElementService,
		attrs: angular.IAttributes,
		[tabContainerCtrl, dragContainerCtrl, tabInitCtrl]: [TabContainerController, DraggableContainerController, TabOrderInitController]
	) {
		let dragEventsSub = rx
			.if(() => !!dragContainerCtrl, dragContainerCtrl.observe())
			.merge(rx.if(() => !!tabInitCtrl, tabInitCtrl.observe()))
			.filter(notification => filterEvent(notification))
			.subscribe(notifications => onDragEvent(notifications));

		scope.$on('$destroy', () => dragEventsSub && dragEventsSub.dispose());

		if (tabInitCtrl) {
			tabInitCtrl.registerTabs(tabContainerCtrl.getTabs());
		}

		function filterEvent({ destination, payload: tab, index }: Draggable.DragNotification<TabController>) {
			if (destination !== tabContainerCtrl.tabOrderId) return false;
			return destination != tab.containerTabOrderId || index != tabContainerCtrl.getTabs().indexOf(tab);
		}

		function onDragEvent({ destination, element, index, payload: tab }: Draggable.DragNotification<TabController>) {
			if (destination != tab.containerTabOrderId && element) {
				element.remove();
			}

			console.log('%cTab Order Event', logColors['orange'], { destination, index }, '\n', tab);
			scope.$evalAsync(() => {
				let originalContainerCtrl = tab.containerCtrl;
				originalContainerCtrl.removeTab(tab);
				tabContainerCtrl.insertTab(tab, index);
				new Set<TabContainerController>([originalContainerCtrl, tabContainerCtrl]).forEach(ctrl => ctrl.onOrderChange({
					containerId: ctrl.tabOrderId,
					tabIds: ctrl.getTabs().map(tab => tab.identifier)
				}));
			});
		}
	}
});

angular.module('munisSalesLink').directive('tabOrder', ['spgRx', TabOrderDirective]);





/*@MODULE*/
class TabController implements angular.IComponentController {
	static $inject = ['$element'];

	/* BINDINGS */
	containerCtrl: TabContainerController;
	heading: string;
	identifier: string;

	active: boolean;

	constructor(public $element: JQuery) { }

	get containerTabOrderId(): string {
		return this.containerCtrl.tabOrderId;
	}

	$onInit() {
		this.active = false;
		this.containerCtrl.addTab(this);
	}

	$onDestroy() {
		this.containerCtrl.removeTab(this);
	}
}

const TabComponent: angular.IComponentOptions = {
	controller: TabController,
	bindings: {
		heading: '@',
		identifier: '@?'
	},
	require: {
		containerCtrl: '^^tabContainerComponent'
	},
	transclude: true,
	template: ['$attrs', ($attrs: Tab.Attrs) => {
		return $attrs.toggleVisibilityOnly ?
			'<ng-transclude ng-show="$ctrl.active" class="tab-component"></ng-transclude>' :
			'<ng-transclude ng-if="$ctrl.active" class="tab-component"></ng-transclude>';
	}]
};

angular.module('munisSalesLink').component('tabComponent', TabComponent);




declare namespace Tab {
	interface Attrs extends angular.IAttributes {
		toggleVisibilityOnly: string;
	}

	interface ContainerAttrs extends angular.IAttributes {
		tabOrder: string;
	}

	interface OrderInitAttrs extends angular.IAttributes {
		tabOrderInit: string;
	}

	interface OnChangesObject extends angular.IOnChangesObject {
		selectedTabId: angular.IChangesObject<string>;
	}

	interface PlacementPositions extends Dictionary<string[]> { }
}



.tab - container - component {
	padding: 2px;

	.tab - headers - slot {
		left: 0!important;
		padding - top: 4px;
		background - color: #0c1c24;
	}

	.tab - content - slot {

	}
}
